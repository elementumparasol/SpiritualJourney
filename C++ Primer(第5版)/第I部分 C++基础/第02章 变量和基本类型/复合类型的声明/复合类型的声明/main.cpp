//
//  main.cpp
//  复合类型的声明
//
//  Created by Enrica on 2018/7/19.
//  Copyright © 2018 Enrica. All rights reserved.
//

#include <iostream>

int main(int argc, const char * argv[]) {
    
    // 1、一次定义多个变量
    
    /**
     * 变量的定义包括一个基本的数据类型和一组声明符，eg: int i = 10, *p = &i, &r - i，其中
     * int表示基本数据类型，而i、*p和&r表示声明符，而类型修饰符*和&则是声明符的组成部分
     */
    
    // 一条定义语句可以同时定义不同类型对变量，其中变量i是一个int类型
    // 而变量p是一个int类型的指针，而变量r则是一个int类型的引用
    int i = 10, *p = &i, &r = i;
    std::cout << "变量i的值为: " << i << std::endl;
    std::cout << "指针p的地址为: " << p << std::endl;
    std::cout << "指针p指向的变量值为: " << *p << std::endl;
    std::cout << "引用r的值为: " << r << std::endl;  // 引用只不过是它所引用变量的别名，它们本质上是代表同一个东西
    
    /**
     * 涉及指针和引用的声明，通常有两种写法:
     * - (1)、把类型修饰符和变量标识符写在一起: int *p1, *p2，其中p1和p2都是指向int类型变量的指针；
     * - (2)、把类型修饰符和类型名写在一起，并且每条语句只定义一个变量:
     *        int* p1;
     *        int* p2;
     * 上面这两种写法都是正确的，不过通常情况下，我们还是习惯于第一种写法，也就是说将类型修饰符*和&和变量名写在一起
     */
    
    
    
    // 2、指向指针的指针
    
    /**
     * 一般来说，声明符中修饰符的个数并没有限制。以y指针为例，指针时内存中的对象，像其它对象一样，也有自己的地址，
     * 因此，允许把指针的地址再放到另一个指针中。通过*的个数可以区分指针的级别。也就是说，**表示指向指针的指针，
     * 而***表示指向指针的指针的指针，以此类推
     */
    
    int ival = 1024;
    int *ip = &ival;  // 指针ip指向int类型的变量ival
    int **ip2 = &ip;  // 指针ip2是一个指向int类型指针的指针
    std::cout << "变量ival的值为: " << ival << std::endl;
    std::cout << "指针ip的地址为: " << ip << std::endl;
    std::cout << "对指针ip解引用得到的值为: " << *ip << std::endl;  // 解引用一个int类型的指针，会得到一个int类型的数据
    std::cout << "指针ip2的地址为: " << ip2 << std::endl;
    std::cout << "对指针ip2解引用得到的值为: " << *ip2 << std::endl;  // 解引用指针的指针会得到一个指针
    
    
    
    // 3、指向指针的引用
    
    /**
     * 因为引用本身不是一个对象，它只是某个已经存在对象的别名，因此不能定义指向引用的指针。
     * 但是，指针是对象，所以可以定义指向指针的引用。
     */
    
    int m = 45;
    std::cout << "变量m的值是: " << m << std::endl;
    
    // 定义一个指向变量m的指针
    int *mp = &m;
    std::cout << "指针mp的地址为: " << mp << std::endl;
    
    // 再定义一个指向指针mp的引用
    int *&rm = mp;
    std::cout << "指向指针的引用rm所代表的值为: " << rm << std::endl;
    
    return 0;
}
