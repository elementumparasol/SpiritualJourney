import UIKit

/** 1、取模运算符 */

// 取模运算符不能用于浮点数之间
let a = 10 % 3
print("整数10模上3之后的余数是: \(a)")


/** 2、恒等于和不恒等于运算符 */

// 恒等于和不恒等于主要是用于引用类型之间的比较，不能用于比较值类型
// let b = "enrica" === "shi", 像这个就是错误的，因为String类型是值类型，不能用恒等于进行比较
class Person {
    var age: Int
    var name: String
    
    init(age: Int, name: String) {
        self.age = age
        self.name = name
    }
}

let zhangsan = Person(age: 18, name: "Zhangsan")
let lisi = Person(age: 20, name: "Lisi")

// 因为zhangsan和lisi都是引用类型，所以他们之间可以用恒等于进行比较
let c = zhangsan === lisi


/** 3、位运算符 */

// 位运算是以二进位(bit)为单位进行运算的，操作数和结果都是整形数据。常见位运算符如下：
//  - (1)、按位取反(~): ~x，表示将x的值按位取反
//  - (2)、按位与(&): x & y，表示将x和y进行位与运算，只有对应位全为1时，结果才为1，否则结果为0
//  - (3)、按位或(|): x | y，表示将x和y进行位或运算，对应位只要有一个为1，那么整个结果就为1，否则结果为0
//  - (4)、按位异或(^): x ^ y，表示将x和y进行异或运算，只有对应两位刚好相反时，结果才为1，否则结果就为0
//  - (5)、左移运算(<<): x << n，表示将x往左移n位，高位被移除，低位用0补齐
//  - (6)、右移运算(>>): x >> n，表示将x往右移n位，低位被移除，高位用0补齐

let x: UInt8 = 0b10110010
let y: UInt8 = 0b01011110

print("~x = \(~x)")  // 77, 也就是01001101
print("x & y = \(x & y)")  //  18, 也就是00010010
print("x | y = \(x | y)")  // 254, 也就是11111110
print("x ^ y = \(x ^ y)")  // 236, 也就是11101100

print("x >> 2 = \(x >> 2)")  //  44, 也就是00101100(0b10110010往右移动两位)
print("y >> 2 = \(y >> 2)")  //  23, 也就是00010111(0b01011110往右移动两位)
print("x << 2 = \(x << 2)")  // 200, 也就是11001000(0b10110010往左移动两位)
print("y << 2 = \(y << 2)")  // 120, 也就是01111000(0b01011110往左移动两位)
